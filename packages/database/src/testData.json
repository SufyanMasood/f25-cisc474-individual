{
  "users": [
    {
      "userId": "admin001",
      "firstName": "Sarah",
      "lastName": "Jones",
      "email": "sjones@university.edu",
      "emailVerified": "2024-08-15T10:00:00Z",
      "userRole": "ADMIN"
    },
    {
      "userId": "instructor001",
      "firstName": "Michael",
      "lastName": "Chen",
      "email": "mchen@university.edu",
      "emailVerified": "2024-08-20T14:30:00Z",
      "userRole": "INSTRUCTOR"
    },
    {
      "userId": "instructor002",
      "firstName": "Lisa",
      "lastName": "Rodriguez",
      "email": "lrodriguez@university.edu",
      "emailVerified": "2024-08-18T09:15:00Z",
      "userRole": "INSTRUCTOR"
    },
    {
      "userId": "student001",
      "firstName": "Alice",
      "lastName": "Johnson",
      "email": "ajohnson@student.edu",
      "emailVerified": "2024-09-01T12:00:00Z",
      "userRole": "STUDENT"
    },
    {
      "userId": "student002",
      "firstName": "Bob",
      "lastName": "Smith",
      "email": "bsmith@student.edu",
      "emailVerified": "2024-09-02T08:30:00Z",
      "userRole": "STUDENT"
    },
    {
      "userId": "student003",
      "firstName": "Carol",
      "lastName": "Davis",
      "email": "cdavis@student.edu",
      "emailVerified": null,
      "userRole": "STUDENT"
    }
  ],
  "userProfiles": [
    {
      "userProfileId": "profile001",
      "userId": "admin001",
      "avatarUrl": null,
      "biography": "System administrator managing the LMS platform."
    },
    {
      "userProfileId": "profile002",
      "userId": "instructor001",
      "avatarUrl": "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150",
      "biography": "Computer Science professor specializing in algorithms."
    },
    {
      "userProfileId": "profile003",
      "userId": "instructor002",
      "avatarUrl": null,
      "biography": "Mathematics professor who hasn't uploaded a photo yet."
    },
    {
      "userProfileId": "profile004",
      "userId": "student001",
      "avatarUrl": null,
      "biography": "CS major interested in collaborative learning approaches."
    },
    {
      "userProfileId": "profile005",
      "userId": "student002",
      "avatarUrl": null,
      "biography": null
    }
  ],
  "courses": [
    {
      "courseId": "course001",
      "courseName": "Data Structures and Algorithms",
      "courseCode": "CISC320",
      "description": "Introduction to fundamental data structures and algorithms.",
      "instructorId": "instructor001"
    },
    {
      "courseId": "course002",
      "courseName": "Advanced Web Development",
      "courseCode": "CISC474",
      "description": "Comprehensive web development course.",
      "instructorId": "instructor002"
    },
    {
      "courseId": "course003",
      "courseName": "Senior Capstone Project",
      "courseCode": "CISC498",
      "description": "Real world experience working on a team-based software project.",
      "instructorId": "instructor001"
    }
  ],
  "enrollments": [
    {
      "enrollmentId": "enrollment001",
      "studentId": "student001",
      "courseId": "course001",
      "enrolledDate": "2024-08-25T10:00:00Z"
    },
    {
      "enrollmentId": "enrollment002",
      "studentId": "student002",
      "courseId": "course001",
      "enrolledDate": "2024-08-25T10:15:00Z"
    },
    {
      "enrollmentId": "enrollment003",
      "studentId": "student003",
      "courseId": "course001",
      "enrolledDate": "2024-08-25T10:30:00Z"
    },
    {
      "enrollmentId": "enrollment004",
      "studentId": "student001",
      "courseId": "course002",
      "enrolledDate": "2024-08-26T09:00:00Z"
    }
  ],
  "assignments": [
    {
      "assignmentId": "assignment001",
      "title": "Binary Search Tree Implementation",
      "description": "Implement a complete binary search tree with insert, delete, and search operations using JavaScript or Python.",
      "assignmentType": "Project",
      "maxPoints": 100,
      "dueDateTime": "2024-10-15T23:59:00Z",
      "publishDateTime": "2024-09-15T08:00:00Z",
      "courseId": "course001"
    },
    {
      "assignmentId": "assignment002",
      "title": "Collaborative Algorithm Implementation",
      "description": "Multi-step coding challenge where each student builds upon the previous student's work to create a complete sorting algorithm solution.",
      "assignmentType": "CollabCode",
      "maxPoints": 150,
      "dueDateTime": "2024-11-01T23:59:00Z",
      "publishDateTime": "2024-09-20T08:00:00Z",
      "courseId": "course001"
    },
    {
      "assignmentId": "assignment003",
      "title": "React Component Development",
      "description": "Build a responsive React component with proper state management and API integration.",
      "assignmentType": "Homework",
      "maxPoints": 75,
      "dueDateTime": "2024-10-10T23:59:00Z",
      "publishDateTime": "2024-09-25T08:00:00Z",
      "courseId": "course002"
    }
  ],
  "submissions": [
    {
      "submissionId": "submission001",
      "assignmentId": "assignment001",
      "studentId": "student001",
      "submissionText": "class BinarySearchTree {\n  constructor() {\n    this.root = null;\n  }\n  \n  insert(value) {\n    if (!this.root) {\n      this.root = new Node(value);\n    } else {\n      this.insertNode(this.root, value);\n    }\n  }\n  \n  search(value) {\n    return this.searchNode(this.root, value);\n  }\n  \n  // Additional methods implemented...\n}",
      "submittedAt": "2024-10-14T18:30:00Z",
      "lastModified": "2024-10-14T19:15:00Z",
      "isGroupWork": false,
      "collaborators": null
    },
    {
      "submissionId": "submission002",
      "assignmentId": "assignment002",
      "studentId": "student001",
      "submissionText": "Step 1: Algorithm Analysis and Design\n\nFor this collaborative coding challenge, I've analyzed various sorting algorithms and determined that merge sort provides the optimal balance of performance and implementation complexity.\n\nKey findings:\n- Time complexity: O(n log n) in all cases\n- Space complexity: O(n)\n- Stable sorting algorithm\n- Divide and conquer approach\n\nI've outlined the basic structure:\n1. Divide array into halves\n2. Recursively sort each half\n3. Merge sorted halves\n\nNext collaborator should implement the core mergeSort function based on this analysis.",
      "submittedAt": "2024-10-20T14:20:00Z",
      "lastModified": "2024-10-20T14:45:00Z",
      "isGroupWork": true,
      "collaborators": "student002,student003"
    },
    {
      "submissionId": "submission003",
      "assignmentId": "assignment002",
      "studentId": "student002",
      "submissionText": "Step 2: Core Algorithm Implementation\n\nBuilding on Alice's excellent analysis, I've implemented the merge sort algorithm:\n\nfunction mergeSort(arr) {\n  if (arr.length <= 1) {\n    return arr;\n  }\n  \n  const mid = Math.floor(arr.length / 2);\n  const left = arr.slice(0, mid);\n  const right = arr.slice(mid);\n  \n  return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n  let result = [];\n  let leftIndex = 0;\n  let rightIndex = 0;\n  \n  while (leftIndex < left.length && rightIndex < right.length) {\n    if (left[leftIndex] < right[rightIndex]) {\n      result.push(left[leftIndex]);\n      leftIndex++;\n    } else {\n      result.push(right[rightIndex]);\n      rightIndex++;\n    }\n  }\n  \n  return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n}\n\nNext collaborator should add comprehensive testing and performance analysis.",
      "submittedAt": "2024-10-22T16:10:00Z",
      "lastModified": "2024-10-22T16:25:00Z",
      "isGroupWork": true,
      "collaborators": "student001,student003"
    }
  ],
  "grades": [
    {
      "gradeId": "grade001",
      "submissionId": "submission001",
      "graderId": "instructor001",
      "pointsEarned": 85,
      "totalPoints": 100,
      "feedback": "Strong BST implementation with good use of object-oriented principles. Insert and search methods work correctly. Delete method handles most cases but needs refinement for nodes with two children. Code is clean and well-structured.",
      "gradedOn": "2024-10-16T10:30:00Z"
    },
    {
      "gradeId": "grade002",
      "submissionId": "submission002",
      "graderId": "instructor001",
      "pointsEarned": 45,
      "totalPoints": 50,
      "feedback": "Excellent algorithm analysis and problem decomposition. Your choice of merge sort is well-justified with clear reasoning about complexity trade-offs. Good foundation for the collaborative coding sequence.",
      "gradedOn": "2024-10-21T09:15:00Z"
    }
  ],
  "announcements": [
    {
      "announcementId": "announcement001",
      "courseId": "course001",
      "subject": "Welcome to CISC320!",
      "message": "Welcome to Data Structures and Algorithms! Please review the course syllabus and set up your development environment. Our first programming assignment has been posted.",
      "publishedAt": "2024-08-28T08:00:00Z",
      "updatedAt": "2024-08-28T08:00:00Z"
    },
    {
      "announcementId": "announcement002",
      "courseId": "course001",
      "subject": "New CollabCode Assignment Posted",
      "message": "I've posted our innovative CollabCode assignment! This collaborative coding challenge will test your ability to work in sequence with your classmates. Each step builds on the previous, so communication and clear code documentation are essential.",
      "publishedAt": "2024-09-20T10:30:00Z",
      "updatedAt": "2024-09-20T10:30:00Z"
    }
  ]
}