// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
}

model Users {
  userId        String     @id @default(uuid())
  firstName     String?
  lastName      String?
  email         String?    @unique
  emailVerified DateTime?
  userRole      UserRole   @default(STUDENT)
  authentications Authentication[]
}

model Authentication {
  id         String   @id @default(cuid())
  userId     String
  provider   String
  providerId String
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
  @@unique([provider, providerId])
  @@index([provider, providerId])
  @@map("authentications")
}


model UserProfiles {
  userProfileId String   @id @default(uuid())
  userId        String   @unique
  avatarUrl     String?
  biography     String?
}

model Courses {
  courseId     String   @id @default(uuid())
  courseName   String
  courseCode   String   @unique
  description  String?
  instructorId String
}

model Enrollments {
  enrollmentId String    @id @default(uuid())
  studentId    String
  courseId     String
  enrolledDate DateTime  @default(now())

  @@unique([studentId, courseId])
  @@index([studentId])
}

model Assignments {
  assignmentId    String    @id @default(uuid())
  title           String
  description     String?
  assignmentType  String
  maxPoints       Int       @default(100)
  dueDateTime     DateTime
  publishDateTime DateTime
  courseId        String

  @@index([courseId])
}

model Submissions {
  submissionId   String   @id @default(uuid())
  assignmentId   String
  studentId      String
  submissionText String
  submittedAt    DateTime  @default(now())
  lastModified   DateTime  @updatedAt
  isGroupWork    Boolean   @default(false)
  collaborators  String?   // student IDs in a comma-separated string for unique submission type assignments
}

model Grades {
  gradeId      String    @id @default(uuid())
  submissionId String    @unique
  graderId     String
  pointsEarned Int
  totalPoints  Int
  feedback     String?
  gradedOn     DateTime  @default(now())
}

model Announcements {
  announcementId String    @id @default(uuid())
  courseId       String
  subject        String
  message        String
  publishedAt    DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
}