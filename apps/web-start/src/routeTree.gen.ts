/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginIndexRouteImport } from './routes/login/index'
import { Route as StudentDashboardIndexRouteImport } from './routes/student/dashboard/index'
import { Route as InstructorAssignmentsIndexRouteImport } from './routes/instructor/assignments/index'
import { Route as AdminCoursesIndexRouteImport } from './routes/admin/courses/index'
import { Route as InstructorAssignmentsCreateRouteImport } from './routes/instructor/assignments/create'
import { Route as InstructorAssignmentsAssignmentIdManageRouteImport } from './routes/instructor/assignments/$assignmentId.manage'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginIndexRoute = LoginIndexRouteImport.update({
  id: '/login/',
  path: '/login/',
  getParentRoute: () => rootRouteImport,
} as any)
const StudentDashboardIndexRoute = StudentDashboardIndexRouteImport.update({
  id: '/student/dashboard/',
  path: '/student/dashboard/',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructorAssignmentsIndexRoute =
  InstructorAssignmentsIndexRouteImport.update({
    id: '/instructor/assignments/',
    path: '/instructor/assignments/',
    getParentRoute: () => rootRouteImport,
  } as any)
const AdminCoursesIndexRoute = AdminCoursesIndexRouteImport.update({
  id: '/admin/courses/',
  path: '/admin/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const InstructorAssignmentsCreateRoute =
  InstructorAssignmentsCreateRouteImport.update({
    id: '/instructor/assignments/create',
    path: '/instructor/assignments/create',
    getParentRoute: () => rootRouteImport,
  } as any)
const InstructorAssignmentsAssignmentIdManageRoute =
  InstructorAssignmentsAssignmentIdManageRouteImport.update({
    id: '/instructor/assignments/$assignmentId/manage',
    path: '/instructor/assignments/$assignmentId/manage',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/instructor/assignments/create': typeof InstructorAssignmentsCreateRoute
  '/admin/courses': typeof AdminCoursesIndexRoute
  '/instructor/assignments': typeof InstructorAssignmentsIndexRoute
  '/student/dashboard': typeof StudentDashboardIndexRoute
  '/instructor/assignments/$assignmentId/manage': typeof InstructorAssignmentsAssignmentIdManageRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginIndexRoute
  '/instructor/assignments/create': typeof InstructorAssignmentsCreateRoute
  '/admin/courses': typeof AdminCoursesIndexRoute
  '/instructor/assignments': typeof InstructorAssignmentsIndexRoute
  '/student/dashboard': typeof StudentDashboardIndexRoute
  '/instructor/assignments/$assignmentId/manage': typeof InstructorAssignmentsAssignmentIdManageRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login/': typeof LoginIndexRoute
  '/instructor/assignments/create': typeof InstructorAssignmentsCreateRoute
  '/admin/courses/': typeof AdminCoursesIndexRoute
  '/instructor/assignments/': typeof InstructorAssignmentsIndexRoute
  '/student/dashboard/': typeof StudentDashboardIndexRoute
  '/instructor/assignments/$assignmentId/manage': typeof InstructorAssignmentsAssignmentIdManageRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/instructor/assignments/create'
    | '/admin/courses'
    | '/instructor/assignments'
    | '/student/dashboard'
    | '/instructor/assignments/$assignmentId/manage'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/instructor/assignments/create'
    | '/admin/courses'
    | '/instructor/assignments'
    | '/student/dashboard'
    | '/instructor/assignments/$assignmentId/manage'
  id:
    | '__root__'
    | '/'
    | '/login/'
    | '/instructor/assignments/create'
    | '/admin/courses/'
    | '/instructor/assignments/'
    | '/student/dashboard/'
    | '/instructor/assignments/$assignmentId/manage'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginIndexRoute: typeof LoginIndexRoute
  InstructorAssignmentsCreateRoute: typeof InstructorAssignmentsCreateRoute
  AdminCoursesIndexRoute: typeof AdminCoursesIndexRoute
  InstructorAssignmentsIndexRoute: typeof InstructorAssignmentsIndexRoute
  StudentDashboardIndexRoute: typeof StudentDashboardIndexRoute
  InstructorAssignmentsAssignmentIdManageRoute: typeof InstructorAssignmentsAssignmentIdManageRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login/': {
      id: '/login/'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/student/dashboard/': {
      id: '/student/dashboard/'
      path: '/student/dashboard'
      fullPath: '/student/dashboard'
      preLoaderRoute: typeof StudentDashboardIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructor/assignments/': {
      id: '/instructor/assignments/'
      path: '/instructor/assignments'
      fullPath: '/instructor/assignments'
      preLoaderRoute: typeof InstructorAssignmentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/courses/': {
      id: '/admin/courses/'
      path: '/admin/courses'
      fullPath: '/admin/courses'
      preLoaderRoute: typeof AdminCoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructor/assignments/create': {
      id: '/instructor/assignments/create'
      path: '/instructor/assignments/create'
      fullPath: '/instructor/assignments/create'
      preLoaderRoute: typeof InstructorAssignmentsCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/instructor/assignments/$assignmentId/manage': {
      id: '/instructor/assignments/$assignmentId/manage'
      path: '/instructor/assignments/$assignmentId/manage'
      fullPath: '/instructor/assignments/$assignmentId/manage'
      preLoaderRoute: typeof InstructorAssignmentsAssignmentIdManageRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginIndexRoute: LoginIndexRoute,
  InstructorAssignmentsCreateRoute: InstructorAssignmentsCreateRoute,
  AdminCoursesIndexRoute: AdminCoursesIndexRoute,
  InstructorAssignmentsIndexRoute: InstructorAssignmentsIndexRoute,
  StudentDashboardIndexRoute: StudentDashboardIndexRoute,
  InstructorAssignmentsAssignmentIdManageRoute:
    InstructorAssignmentsAssignmentIdManageRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
